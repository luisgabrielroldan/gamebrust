use super::*;
use crate::memory::Ram;
use registers::*;

#[test]
fn ld_instrs() {
    const INSTRS: [[u8; 8]; 8] = [
        [0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47],
        [0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F],
        [0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57],
        [0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F],
        [0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67],
        [0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F],
        [0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x77, 0x00],
        [0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F],
    ];
    let mut mem = Ram::new(0x200);
    let mut cpu = CPU::new();

    for t in 0..INSTRS.len() {
        cpu.reg.pc = 0;

        cpu.reg.set_r16(R16::HL, 0x0101);

        for i in 0..8 {
            mem.w8(i as u16, INSTRS[t][i]);
            cpu.step(&mut mem);
        }
    }
}

#[test]
fn bit_instrs() {
    const INSTRS: [u8; 112] = [
        0xCB, 0x40, 0xCB, 0x41, 0xCB, 0x42, 0xCB, 0x43, 0xCB, 0x44, 0xCB, 0x45, 0xCB, 0x47, 0xCB,
        0x48, 0xCB, 0x49, 0xCB, 0x4A, 0xCB, 0x4B, 0xCB, 0x4C, 0xCB, 0x4D, 0xCB, 0x4F, 0xCB, 0x50,
        0xCB, 0x51, 0xCB, 0x52, 0xCB, 0x53, 0xCB, 0x54, 0xCB, 0x55, 0xCB, 0x57, 0xCB, 0x58, 0xCB,
        0x59, 0xCB, 0x5A, 0xCB, 0x5B, 0xCB, 0x5C, 0xCB, 0x5D, 0xCB, 0x5F, 0xCB, 0x60, 0xCB, 0x61,
        0xCB, 0x62, 0xCB, 0x63, 0xCB, 0x64, 0xCB, 0x65, 0xCB, 0x67, 0xCB, 0x68, 0xCB, 0x69, 0xCB,
        0x6A, 0xCB, 0x6B, 0xCB, 0x6C, 0xCB, 0x6D, 0xCB, 0x6F, 0xCB, 0x70, 0xCB, 0x71, 0xCB, 0x72,
        0xCB, 0x73, 0xCB, 0x74, 0xCB, 0x75, 0xCB, 0x77, 0xCB, 0x78, 0xCB, 0x79, 0xCB, 0x7A, 0xCB,
        0x7B, 0xCB, 0x7C, 0xCB, 0x7D, 0xCB, 0x7F,
    ];

    let mut mem = Ram::new(0x10);
    let mut cpu = CPU::new();

    for i in 0..INSTRS.len() / 2 {
        mem.w8(0x0000, INSTRS[i * 2]);
        mem.w8(0x0001, INSTRS[i * 2 + 1]);

        cpu.reg.set_r16(R16::AF, 0xFF00);
        cpu.reg.set_r16(R16::BC, 0xFFFF);
        cpu.reg.set_r16(R16::DE, 0xFFFF);
        cpu.reg.set_r16(R16::HL, 0xFFFF);

        cpu.reg.pc = 0;
        cpu.step(&mut mem);

        assert_eq!(cpu.reg.flags.z, false);

        cpu.reg.set_r16(R16::AF, 0);
        cpu.reg.set_r16(R16::BC, 0);
        cpu.reg.set_r16(R16::DE, 0);
        cpu.reg.set_r16(R16::HL, 0);

        cpu.reg.pc = 0;
        cpu.step(&mut mem);

        assert_eq!(cpu.reg.flags.z, true);
    }
}

#[test]
fn res_instrs() {
    const INSTRS: [u8; 112] = [
        0xCB, 0x80, 0xCB, 0x81, 0xCB, 0x82, 0xCB, 0x83, 0xCB, 0x84, 0xCB, 0x85, 0xCB, 0x87, 0xCB,
        0x88, 0xCB, 0x89, 0xCB, 0x8A, 0xCB, 0x8B, 0xCB, 0x8C, 0xCB, 0x8D, 0xCB, 0x8F, 0xCB, 0x90,
        0xCB, 0x91, 0xCB, 0x92, 0xCB, 0x93, 0xCB, 0x94, 0xCB, 0x95, 0xCB, 0x97, 0xCB, 0x98, 0xCB,
        0x99, 0xCB, 0x9A, 0xCB, 0x9B, 0xCB, 0x9C, 0xCB, 0x9D, 0xCB, 0x9F, 0xCB, 0xA0, 0xCB, 0xA1,
        0xCB, 0xA2, 0xCB, 0xA3, 0xCB, 0xA4, 0xCB, 0xA5, 0xCB, 0xA7, 0xCB, 0xA8, 0xCB, 0xA9, 0xCB,
        0xAA, 0xCB, 0xAB, 0xCB, 0xAC, 0xCB, 0xAD, 0xCB, 0xAF, 0xCB, 0xB0, 0xCB, 0xB1, 0xCB, 0xB2,
        0xCB, 0xB3, 0xCB, 0xB4, 0xCB, 0xB5, 0xCB, 0xB7, 0xCB, 0xB8, 0xCB, 0xB9, 0xCB, 0xBA, 0xCB,
        0xBB, 0xCB, 0xBC, 0xCB, 0xBD, 0xCB, 0xBF,
    ];

    let mut mem = Ram::new(INSTRS.len());
    let mut cpu = CPU::new();

    for i in 0..INSTRS.len() {
        mem.w8(i as u16, INSTRS[i]);
    }

    cpu.reg.set_r16(R16::AF, 0xFFFF);
    cpu.reg.set_r16(R16::BC, 0xFFFF);
    cpu.reg.set_r16(R16::DE, 0xFFFF);
    cpu.reg.set_r16(R16::HL, 0xFFFF);

    for _i in 0..INSTRS.len() / 2 {
        cpu.step(&mut mem);
    }

    assert_eq!(cpu.reg.a, 0);
    assert_eq!(cpu.reg.b, 0);
    assert_eq!(cpu.reg.c, 0);
    assert_eq!(cpu.reg.d, 0);
    assert_eq!(cpu.reg.e, 0);
    assert_eq!(cpu.reg.h, 0);
    assert_eq!(cpu.reg.l, 0);
}

#[test]
fn set_instrs() {
    const INSTRS: [u8; 112] = [
        0xCB, 0xC0, 0xCB, 0xC1, 0xCB, 0xC2, 0xCB, 0xC3, 0xCB, 0xC4, 0xCB, 0xC5, 0xCB, 0xC7, 0xCB,
        0xC8, 0xCB, 0xC9, 0xCB, 0xCA, 0xCB, 0xCB, 0xCB, 0xCC, 0xCB, 0xCD, 0xCB, 0xCF, 0xCB, 0xD0,
        0xCB, 0xD1, 0xCB, 0xD2, 0xCB, 0xD3, 0xCB, 0xD4, 0xCB, 0xD5, 0xCB, 0xD7, 0xCB, 0xD8, 0xCB,
        0xD9, 0xCB, 0xDA, 0xCB, 0xDB, 0xCB, 0xDC, 0xCB, 0xDD, 0xCB, 0xDF, 0xCB, 0xE0, 0xCB, 0xE1,
        0xCB, 0xE2, 0xCB, 0xE3, 0xCB, 0xE4, 0xCB, 0xE5, 0xCB, 0xE7, 0xCB, 0xE8, 0xCB, 0xE9, 0xCB,
        0xEA, 0xCB, 0xEB, 0xCB, 0xEC, 0xCB, 0xED, 0xCB, 0xEF, 0xCB, 0xF0, 0xCB, 0xF1, 0xCB, 0xF2,
        0xCB, 0xF3, 0xCB, 0xF4, 0xCB, 0xF5, 0xCB, 0xF7, 0xCB, 0xF8, 0xCB, 0xF9, 0xCB, 0xFA, 0xCB,
        0xFB, 0xCB, 0xFC, 0xCB, 0xFD, 0xCB, 0xFF,
    ];

    let mut mem = Ram::new(INSTRS.len());
    let mut cpu = CPU::new();

    for i in 0..INSTRS.len() {
        mem.w8(i as u16, INSTRS[i]);
    }

    cpu.reg.set_r16(R16::AF, 0);
    cpu.reg.set_r16(R16::BC, 0);
    cpu.reg.set_r16(R16::DE, 0);
    cpu.reg.set_r16(R16::HL, 0);

    for _i in 0..INSTRS.len() / 2 {
        cpu.step(&mut mem);
    }

    assert_eq!(cpu.reg.a, 0xFF);
    assert_eq!(cpu.reg.b, 0xFF);
    assert_eq!(cpu.reg.c, 0xFF);
    assert_eq!(cpu.reg.d, 0xFF);
    assert_eq!(cpu.reg.e, 0xFF);
    assert_eq!(cpu.reg.h, 0xFF);
    assert_eq!(cpu.reg.l, 0xFF);
}
