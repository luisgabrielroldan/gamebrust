use super::*;
use crate::memory::Ram;
use registers::*;

const lds_instrs : [u8; 63] = [0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F];


#[test]
fn general_check() {
    let mut mem = Ram::new(0x100);
    let mut cpu = CPU::new();
    cpu.reg.set_r16(R16::AF, 0x10);
    cpu.reg.set_r16(R16::BC, 0x23);
    cpu.reg.set_r16(R16::DE, 0x45);
    cpu.reg.set_r16(R16::HL, 0x80);
        
    for i in 0..63 {
        mem.w8(i as u16, lds_instrs[i]);
    }

    for _i in 0..64 {
        cpu.step(&mut mem);
    }

    assert_eq!(0x0006, cpu.reg.pc);
    assert_eq!(0x88, mem.r8(0x0020));
}
